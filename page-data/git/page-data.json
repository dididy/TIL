{"componentChunkName":"component---src-templates-wiki-post-jsx","path":"/git","result":{"data":{"markdownRemark":{"html":"<h1>Git</h1>\n<h3>master 브랜치만 남기고 지우기</h3>\n\n        <deckgo-highlight-code language=\"bash\"  terminal=\"carbon\" >\n          <code slot=\"code\">$ git branch | grep -v &quot;master&quot; | xargs git branch -d</code>\n        </deckgo-highlight-code>\n      \n<hr>\n<h3><a href=\"https://www.notion.so/TIL_20200715-84bbe0a9dd2d4664b5a1a36b10c5b1b8\">merge안된 PR을 pull 받고 싶은 경우</a></h3>\n\n        <deckgo-highlight-code language=\"bash\"  terminal=\"carbon\" >\n          <code slot=\"code\">git pull origin pull/&lt;number&gt;/head:pr-&lt;number&gt;</code>\n        </deckgo-highlight-code>\n      \n<hr>\n<h3><a href=\"https://douglascayers.com/2019/08/01/how-to-export-and-import-github-issue-labels-between-projects/\">issue label 등록 자동화</a></h3>\n<ul>\n<li>\n<p>등록하고싶은 issue label이 있는 GtiHub 페이지에서 개발자 도구로 아래의 코드를 실행</p>\n<ul>\n<li>실행에 앞서 TARGET_URL을 설정해야 함</li>\n<li>name, description, color의 key로 구성된 객체형태로 생성함</li>\n<li>해당 객체를 이용해 TARGET_URL 리포지토리에 issue label 자동으로 등록해줌</li>\n</ul>\n</li>\n</ul>\n\n        <deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" >\n          <code slot=\"code\">const TARGET_URL = &quot;https://github.com/&lt;repository&gt;/labels&quot;;\n\nvar labels = [];\n[].slice.call(document.querySelectorAll(&quot;.js-label-link&quot;))\n.forEach(function(element) {\n  labels.push({\n    name: element.textContent.trim(),\n    description: element.getAttribute(&quot;title&quot;),\n    // using style.backgroundColor might returns &quot;rgb(...)&quot;\n    color: element.getAttribute(&quot;style&quot;)\n      .replace(&quot;background-color:&quot;, &quot;&quot;)\n      .replace(/color:.*/,&quot;&quot;)\n      .trim()\n      // github wants hex code only without # or ;\n      .replace(/^#/, &quot;&quot;)\n      .replace(/;$/, &quot;&quot;)\n      .trim(),\n  })\n})\n\n// console.log(JSON.stringify(labels, null, 2))\n\nfunction createLabel(label) {\n  newWindow.document.querySelector(&quot;.js-new-label-name-input&quot;).value = label.name;\n  newWindow.document.querySelector(&quot;.js-new-label-description-input&quot;).value =\n    label.description;\n    newWindow.document.querySelector(&quot;.js-details-target ~ .btn-primary&quot;).disabled = false;\n    newWindow.document.querySelector(&quot;.js-details-target ~ .btn-primary&quot;).click();\n}\n\nfunction updateLabel(label) {\n  let updatedLabel = false;\n  [].slice\n    .call(newWindow.document.querySelectorAll(&quot;.js-labels-list-item&quot;))\n    .forEach((element) =&gt; {\n      if (\n        element.querySelector(&quot;.js-label-link&quot;).textContent.trim() ===\n        label.name\n      ) {\n        updatedLabel = true;\n        element.querySelector(&quot;.js-edit-label&quot;).click();\n        element.querySelector(&quot;.js-new-label-name-input&quot;).value = label.name;\n        element.querySelector(&quot;.js-new-label-description-input&quot;).value =\n          label.description;\n          element.querySelector(&quot;.js-new-label-color-input&quot;).value =\n          &quot;#&quot; + label.color;\n          element.querySelector(&quot;.js-edit-label-cancel ~ .btn-primary&quot;).click();\n      }\n    });\n  return updatedLabel;\n}\nfunction createOrUpdate(label) {\n  console.log(label)\n  if (!updateLabel(label)) {\n    createLabel(label);\n  }\n}\n\nnewWindow = window.open(TARGET_URL,&quot;new&quot;);\n\nnewWindow.onload = function something() {\n  labels.forEach((label) =&gt; createOrUpdate(label));\n}</code>\n        </deckgo-highlight-code>\n      \n<hr>\n<h3>heroku</h3>\n<blockquote>\n<p>master가 아닌 브랜치를 heroku에 push하고 싶은 경우</p>\n</blockquote>\n\n        <deckgo-highlight-code language=\"bash\"  terminal=\"carbon\" >\n          <code slot=\"code\">git push heroku yourbranch:master</code>\n        </deckgo-highlight-code>\n      \n<blockquote>\n<p>master가 아닌 subtree 브랜치를 heroku에 push하고 싶은 경우</p>\n</blockquote>\n\n        <deckgo-highlight-code language=\"bash\"  terminal=\"carbon\" >\n          <code slot=\"code\">git push heroku $(git subtree split --prefix=backend $(git symbolic-ref --short -q HEAD)):master --force</code>\n        </deckgo-highlight-code>\n      ","frontmatter":{"path":"/git","title":"Git"}}},"pageContext":{}}}